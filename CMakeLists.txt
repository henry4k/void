CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)


LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")

# Set compiler warnings
IF(MSVC)
	# Force to always compile with W4
	IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
		STRING(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	ELSE()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
	ENDIF()
ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
	# Update if necessary
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wpointer-arith -Wcast-qual -Winit-self -Wno-variadic-macros -Wno-long-long -Wno-sign-compare -Wno-unused-result")
ENDIF()


MACRO(RequirePackage Package)
	FIND_PACKAGE(${Package})
	STRING(TOUPPER ${Package} PackageUppercase)
	IF(NOT "${PackageUppercase}_FOUND" AND NOT "${Package}_FOUND")
		GET_FILENAME_COMPONENT(Module ${CMAKE_CURRENT_SOURCE_DIR} NAME)
		MESSAGE("${Module}: Can't find ${Package}")
		RETURN()
	ENDIF()
ENDMACRO()


PROJECT("Dungeon" C CXX)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/Release")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/Release")

INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/Source")
ADD_SUBDIRECTORY("Source/kj")